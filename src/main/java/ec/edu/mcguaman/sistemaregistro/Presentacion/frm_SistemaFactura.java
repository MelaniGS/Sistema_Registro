/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ec.edu.mcguaman.sistemaregistro.Presentacion;

import ec.edu.mcguaman.sistemaregistro.Negocio.FacturaServicio;
import ec.edu.mcguaman.sistemaregistro.Negocio.PersonaServicio;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.DetalleFactura;
import modelo.Factura;
import modelo.Persona;
import modelo.Producto;

/**
 *
 * @author ASUS
 */
public class frm_SistemaFactura extends javax.swing.JInternalFrame {

    private List<DetalleFactura> detallesFactura = new ArrayList();
    private Producto productoEncontrado;
    private Persona personaEncontrada;

    // Crea una instancia de la clase FacturaServicio
    private FacturaServicio servicio;

    private PersonaServicio servicioPersona;  // Agregar una instancia de PersonaServicio

    /**
     * Creates new form SistemaFactura
     */
    public frm_SistemaFactura() {
        initComponents();
        // Inicializar el servicio
        servicio = new FacturaServicio();

        servicioPersona = new PersonaServicio();

        // Registrar el evento de clic en la tabla tbl_productos
        tbl_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_productosMouseClicked(evt);  // Llama al método que maneja la carga de datos
            }
        });

        this.txt_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                evt.consume();  // Consume el evento para evitar que se ingrese texto
            }
        });

        this.txt_idC.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                evt.consume();  // Consume el evento para evitar que se ingrese texto
            }
        });

        this.txt_nombreProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                evt.consume();  // Consume el evento para evitar que se ingrese texto
            }
        });
//        this.txt_idP.addKeyListener(new java.awt.event.KeyAdapter() {
//            @Override
//            public void keyTyped(java.awt.event.KeyEvent evt) {
//                evt.consume();  // Consume el evento para evitar que se ingrese texto
//            }
//        });

        this.txt_precio.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                evt.consume();  // Consume el evento para evitar que se ingrese texto
            }
        });

        // Deshabilitar los botones y campos de texto al inicio
        this.txt_BuscarProducto.setEnabled(false);  // Deshabilitar el botón de búsqueda de producto
        this.btn_agregarDetalleFactura.setEnabled(false);  // Deshabilitar el botón de agregar producto
        this.txt_IdUser.setEnabled(true);  // Habilitar solo el campo de búsqueda del cliente
        this.txt_BuscarPersona.setEnabled(true);  // Habilitar el botón de búsqueda del cliente

        // Inicializar las tablas de productos y factura
        DefaultTableModel productoModel = new DefaultTableModel();
        productoModel.addColumn("ID Detalle");
        productoModel.addColumn("ID Producto");
        productoModel.addColumn("Producto");
        productoModel.addColumn("Cantidad");
        productoModel.addColumn("Precio Unitario");
        productoModel.addColumn("Total");
        tbl_productos.setModel(productoModel);

        DefaultTableModel facturaModel = new DefaultTableModel();
        facturaModel.addColumn("ID Factura");
        facturaModel.addColumn("ID Cliente");
        facturaModel.addColumn("Nombre Cliente");
        facturaModel.addColumn("Monto Total");
        tbl_detallesFactura.setModel(facturaModel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_detallesFactura = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txt_IdUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_IdProduct = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_productos = new javax.swing.JTable();
        btn_agregarDetalleFactura = new javax.swing.JButton();
        btn_EliminarProducto = new javax.swing.JButton();
        txt_BuscarProducto = new javax.swing.JButton();
        txt_BuscarPersona = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_idC = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_nombreProducto = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btn_Limpiar = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Factura");

        tbl_detallesFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbl_detallesFactura);

        jLabel1.setText("Inserte dato númerico para buscar cliente:");

        txt_IdUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_IdUserKeyTyped(evt);
            }
        });

        jLabel2.setText("Inserte dato númerico para buscar producto:");

        txt_IdProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_IdProductKeyTyped(evt);
            }
        });

        jLabel3.setText("Ingrese la Cantidad:");

        jLabel4.setText("Precio:");

        txt_precio.setEditable(false);

        tbl_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tbl_productos);

        btn_agregarDetalleFactura.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btn_agregarDetalleFactura.setText("AGREGAR PRODUCTO");
        btn_agregarDetalleFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarDetalleFacturaActionPerformed(evt);
            }
        });

        btn_EliminarProducto.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btn_EliminarProducto.setText("ELIMINAR PRODUCTO");
        btn_EliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EliminarProductoActionPerformed(evt);
            }
        });

        txt_BuscarProducto.setText("BUSCAR PRODUCTO");
        txt_BuscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_BuscarProductoActionPerformed(evt);
            }
        });

        txt_BuscarPersona.setText("BUSCAR CLIENTE");
        txt_BuscarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_BuscarPersonaActionPerformed(evt);
            }
        });

        jLabel5.setText("Nombre Cliente:");

        txt_nombre.setEditable(false);

        jLabel6.setFont(new java.awt.Font("Cambria Math", 0, 24)); // NOI18N
        jLabel6.setText("DETALLES DE LOS PRODUCTOS");

        jLabel7.setText("ID Cliente:");

        txt_idC.setEditable(false);

        jLabel8.setText("Nombre del Producto:");

        txt_nombreProducto.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Cambria Math", 0, 24)); // NOI18N
        jLabel10.setText("DETALLES DE LA FACTURA");

        btn_Limpiar.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btn_Limpiar.setText("LIMPIAR");
        btn_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LimpiarActionPerformed(evt);
            }
        });

        btn_actualizar.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btn_actualizar.setText("ACTUALIZAR");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2)
                                .addComponent(jLabel7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_IdProduct, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_IdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_BuscarPersona))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_idC, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btn_agregarDetalleFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_EliminarProducto))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txt_nombreProducto, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txt_BuscarProducto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txt_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_precio, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(99, 99, 99))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel10)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_IdUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_BuscarPersona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txt_idC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 44, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_IdProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_BuscarProducto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txt_nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txt_precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_agregarDetalleFactura)
                            .addComponent(btn_EliminarProducto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Limpiar)
                            .addComponent(btn_actualizar)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_BuscarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_BuscarPersonaActionPerformed
        BuscarPersona();
    }//GEN-LAST:event_txt_BuscarPersonaActionPerformed

    private void txt_BuscarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_BuscarProductoActionPerformed
        BuscarProducto();
    }//GEN-LAST:event_txt_BuscarProductoActionPerformed

    private void btn_agregarDetalleFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarDetalleFacturaActionPerformed
        AgregarDetalleFactura();
        LimpiarFormulario();
    }//GEN-LAST:event_btn_agregarDetalleFacturaActionPerformed

    private void txt_IdUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_IdUserKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        // Permitir solo dígitos (0-9)
        if (!Character.isDigit(c)) {
            evt.consume();  // Consumir el evento para que los caracteres no numéricos sean ignorados
        }
    }//GEN-LAST:event_txt_IdUserKeyTyped

    private void txt_IdProductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_IdProductKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        // Permitir solo dígitos (0-9)
        if (!Character.isDigit(c)) {
            evt.consume();  // Consumir el evento para que los caracteres no numéricos sean ignorados
        }
    }//GEN-LAST:event_txt_IdProductKeyTyped

    private void btn_EliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EliminarProductoActionPerformed
        // TODO add your handling code here:
        EliminarProducto();
    }//GEN-LAST:event_btn_EliminarProductoActionPerformed

    private void btn_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LimpiarActionPerformed
        LimpiarFormulario();
    }//GEN-LAST:event_btn_LimpiarActionPerformed

    private void tbl_productosMouseClicked(java.awt.event.MouseEvent evt) {
        int filaSeleccionada = tbl_productos.getSelectedRow();  // Obtener la fila seleccionada

        if (filaSeleccionada != -1) {  // Si se ha seleccionado una fila
            // Cargar los datos de la fila seleccionada en los campos correspondientes
            txt_nombreProducto.setText(tbl_productos.getValueAt(filaSeleccionada, 2).toString());  // Nombre del producto
            txt_IdProduct.setText(tbl_productos.getValueAt(filaSeleccionada, 1).toString());  // ID Producto
            txt_precio.setText(tbl_productos.getValueAt(filaSeleccionada, 4).toString());  // Precio Unitario
            txt_cantidad.setText(tbl_productos.getValueAt(filaSeleccionada, 3).toString());  // Cantidad

            // Hacer que el campo de cantidad sea editable
            txt_cantidad.setEditable(true);

            // Los campos de nombre y precio deben ser solo lectura
            txt_precio.setEditable(false);
            txt_nombreProducto.setEditable(false);
        }
    }

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        int filaSeleccionada = tbl_productos.getSelectedRow();  // Obtener la fila seleccionada

        if (filaSeleccionada != -1) {  // Si se ha seleccionado una fila
            // Obtener la nueva cantidad desde el cuadro de texto
            int nuevaCantidad = Integer.parseInt(txt_cantidad.getText());

            // Obtener el precio unitario desde el campo de texto (no editable)
            double precioUnitario = Double.parseDouble(txt_precio.getText());

            // Actualizar la cantidad en la fila seleccionada de la tabla
            DefaultTableModel model = (DefaultTableModel) tbl_productos.getModel();
            model.setValueAt(nuevaCantidad, filaSeleccionada, 3);  // Columna 3 es la cantidad

            // Calcular el nuevo total (cantidad * precio)
            double nuevoTotal = nuevaCantidad * precioUnitario;
            model.setValueAt(nuevoTotal, filaSeleccionada, 5);  // Columna 5 es el total

            // Actualizar el monto total de la factura
            actualizarMontoFactura();

            JOptionPane.showMessageDialog(this, "Producto actualizado correctamente.");
        } else {
            JOptionPane.showMessageDialog(this, "Por favor selecciona un producto para actualizar.");
        }
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void LimpiarFormulario() {
        txt_IdProduct.setText("");
        txt_nombreProducto.setText("");
        //txt_idP.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
    }

    private void BuscarPersona() {
        int id = Integer.parseInt(this.txt_IdUser.getText());  // Obtener el ID desde el JTextField
        this.personaEncontrada = this.servicioPersona.BuscarPersonaPorId(id);  // Llamamos al servicio

        if (this.personaEncontrada != null) {
            // Si encontramos la persona, mostramos los datos
            this.txt_nombre.setText(this.personaEncontrada.getNombre());
            this.txt_idC.setText(String.valueOf(this.personaEncontrada.getId()));

            // Hacemos que los campos de texto sean solo de lectura
            this.txt_nombre.setEditable(false);  // No se puede editar el nombre del cliente
            this.txt_idC.setEditable(false);     // No se puede editar el ID del cliente
            this.txt_precio.setEditable(false);
            this.txt_idC.setEditable(false);
            this.txt_nombreProducto.setEditable(false);

            // Habilitar la búsqueda de productos
            this.txt_BuscarProducto.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Cliente no encontrado.");
        }
    }

    private void BuscarProducto() {
        String idProductoStr = this.txt_IdProduct.getText();  // Obtener el ID del producto desde el JTextField
        int idProducto = Integer.parseInt(idProductoStr);  // Convertir el ID a un número entero

        // Llamar al servicio para buscar el producto por su ID
        this.productoEncontrado = this.servicio.BuscarProductoPorId(idProducto);

        if (this.productoEncontrado != null) {
            // Si se encuentra el producto, mostramos los datos en los campos correspondientes
            this.txt_precio.setText(String.valueOf(this.productoEncontrado.getPrecio()));  // Mostrar el precio del producto
            this.txt_nombreProducto.setText(this.productoEncontrado.getNombre());  // Mostrar el nombre del producto

            // Habilitar el botón de agregar producto a la factura
            this.btn_agregarDetalleFactura.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");
        }
    }

    private void AgregarDetalleFactura() {
        int cantidad = Integer.parseInt(this.txt_cantidad.getText());

        if (this.productoEncontrado != null) {
            float precioUnitario = this.productoEncontrado.getPrecio().floatValue();
            float total = cantidad * precioUnitario;

            DefaultTableModel model = (DefaultTableModel) tbl_productos.getModel();
            Object[] row = {
                tbl_productos.getRowCount() + 1,
                this.productoEncontrado.getId(),
                this.productoEncontrado.getNombre(),
                cantidad,
                precioUnitario,
                total
            };
            model.addRow(row);
            actualizarMontoFactura();
        }
    }

    // Actualizar el monto total de la factura
    private void actualizarMontoFactura() {
        float montoTotal = 0;

        // Sumar los totales de los productos en la tabla de productos
        DefaultTableModel model = (DefaultTableModel) tbl_productos.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            float totalProducto = (float) model.getValueAt(i, 5);  // El total de cada producto está en la columna 5
            montoTotal += totalProducto;  // Sumar el total del producto al monto total
        }

        // Actualizar el monto total de la factura en la segunda tabla
        DefaultTableModel facturaModel = (DefaultTableModel) tbl_detallesFactura.getModel();
        facturaModel.setRowCount(0);  // Limpiar la tabla de factura

        // Suponiendo que se puede tener solo un registro de factura, actualizar la tabla de la factura
        Object[] filaFactura = {
            1, // ID Factura (ajustarlo según la lógica que estés usando para el ID)
            this.personaEncontrada.getId(), // ID Cliente
            this.personaEncontrada.getNombre(), // Nombre Cliente
            montoTotal // Monto Total calculado
        };
        facturaModel.addRow(filaFactura);  // Agregar la fila con el monto total calculado
    }

    private void EliminarProducto() {
        int selectedRow = tbl_productos.getSelectedRow();  // Obtener la fila seleccionada de la tabla

        if (selectedRow != -1) {
            // Obtener el ID del detalle de la factura (por ejemplo, en la columna 0 se puede guardar el ID de detalle)
            int idDetalle = (int) tbl_productos.getValueAt(selectedRow, 0);  // Columna 0 almacena el ID de detalle

            // Eliminar la fila de la tabla
            DefaultTableModel model = (DefaultTableModel) tbl_productos.getModel();
            model.removeRow(selectedRow);

            // Aquí puedes eliminar el detalle de la factura de la lista `detallesFactura`
            for (DetalleFactura detalle : detallesFactura) {
                if (detalle.getId() == idDetalle) {
                    detallesFactura.remove(detalle);  // Eliminar el detalle de la lista de detalles de la factura
                    break;  // Salir del bucle una vez encontrado el detalle
                }
            }

            // Actualizar el monto total de la factura
            actualizarMontoFactura();
        } else {
            JOptionPane.showMessageDialog(this, "Por favor selecciona un producto para eliminar.");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_EliminarProducto;
    private javax.swing.JButton btn_Limpiar;
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_agregarDetalleFactura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl_detallesFactura;
    private javax.swing.JTable tbl_productos;
    private javax.swing.JButton txt_BuscarPersona;
    private javax.swing.JButton txt_BuscarProducto;
    private javax.swing.JTextField txt_IdProduct;
    private javax.swing.JTextField txt_IdUser;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_idC;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_nombreProducto;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables
}
